Component API
컴포넌트에는 여러가지 내용들이 기술되 수 있다. 객체에 [key-value] 형식으로 기술됨. 성격이 다른 옵션 API
들이 아무런 그룹없이 존재할 수 있기 때문에 객체로 기술할 경우 인위적인 그룹화가 필요,
-DOM rendering과 관련도니 내용
-컴포넌트에서 사용될 data에 대한 내용
-컴포넌트의 라이프 사이클 메소드
-에셋이라고 표현한 옵션들
-기타라고 표현한 옵션들

Props 란?
컴포넌트가 전달받을 props에 대해 기술하기 위한 API. 단순히 배열로 표현 가능하지만 객체로 기술할 경우
타입 체크 및 유효성 검사 로직을 추가할수 있다.

ex) type: Number. default:0, required : true, validator: 에는 함수를 넣어 paramter를 전달해 true false를 반환

Data?
data 는 this에 value 들을 바인딩(binding)해야 하기 때문에 메소드 형태나 function keyword 를 사용하여 함수 형태로 기술해줘야 함. 화살표 함수(arrow function)을 쓰면 this binding 이 외부 context 를 잡게 되고 undefined 가 되어 data로 기술한 객체에 Vue 인스턴스에서 접근할 수 없음. 이게 런타임에서 에러나는게 참 아쉬움.

Computed? 
이 API는 cache가 핵심이다. getter와 setter로 접근이 가능하다. 변경 사항을 반영할 때 caching 때문에
methods를 사용하는 것보다 빠르게 계산할 수 있다.
cache:false를 통해서 cache기능을 끌 수 있다.

Component is 속성?
동적 컴포넌트를 정의할 때 편리한 내장 컴포넌트 API.
currentFilterView 사용. currentFilterView는 Vue 컴포넌트에서 data로 지정된 속성,
이 값에 A 또는 B 또는 C값이 들어갈 경우, component 태그에 A또는 B또는 C컴포넌트가 렝더링 됨.


keep alive?
무엇이 어떻게 caching 되는가를 보면 인스턴스를 destroy 하지 않고 남겨둠. 즉 keep-alive라는 추상 엘리먼트로 감싸져있는 컴포넌트들이 변경될 때, 사라질 인스턴스를 메모리에서 제거하지 않음. 이로 인해 불필요한 re-render 를 막고 활성화되을 때 변경되었던 상태가 비활성화 후 다시 활성화 되었을 때 유지 됨. 공식 문서에서는 transition 내장 컴포넌트와 함께 사용하여 애니메이션 된 상태를 유지할 때 사용하기도 한다고 되어있음.
